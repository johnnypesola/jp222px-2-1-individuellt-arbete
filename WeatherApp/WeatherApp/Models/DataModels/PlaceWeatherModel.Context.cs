//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherApp.Models.DataModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PlaceWeatherEntities : DbContext
    {
        public PlaceWeatherEntities()
            : base("name=PlaceWeatherEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<Weather> Weathers { get; set; }
    
        public virtual int usp_PlaceCreate(string name, Nullable<decimal> longitude, Nullable<decimal> latitude, ObjectParameter insertId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PlaceCreate", nameParameter, longitudeParameter, latitudeParameter, insertId);
        }
    
        public virtual int usp_PlaceDelete(Nullable<int> placeId)
        {
            var placeIdParameter = placeId.HasValue ?
                new ObjectParameter("PlaceId", placeId) :
                new ObjectParameter("PlaceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PlaceDelete", placeIdParameter);
        }
    
        public virtual int usp_PlaceList(Nullable<int> placeId, string name, Nullable<int> pageIndex, Nullable<int> pageSize, string sortOrder, ObjectParameter totalRowCount)
        {
            var placeIdParameter = placeId.HasValue ?
                new ObjectParameter("PlaceId", placeId) :
                new ObjectParameter("PlaceId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PlaceList", placeIdParameter, nameParameter, pageIndexParameter, pageSizeParameter, sortOrderParameter, totalRowCount);
        }
    
        public virtual int usp_PlaceUpdate(Nullable<int> placeId, string name, Nullable<decimal> longitude, Nullable<decimal> latitude)
        {
            var placeIdParameter = placeId.HasValue ?
                new ObjectParameter("PlaceId", placeId) :
                new ObjectParameter("PlaceId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PlaceUpdate", placeIdParameter, nameParameter, longitudeParameter, latitudeParameter);
        }
    
        public virtual int usp_WeatherCreate(Nullable<int> placeId, Nullable<System.DateTime> dateTime, Nullable<decimal> temperature, Nullable<int> windDirection, Nullable<decimal> windSpeed, Nullable<byte> humidity, Nullable<byte> precipitation, Nullable<byte> totalCloudCover, Nullable<byte> thunderStormProbability, ObjectParameter insertId)
        {
            var placeIdParameter = placeId.HasValue ?
                new ObjectParameter("PlaceId", placeId) :
                new ObjectParameter("PlaceId", typeof(int));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(decimal));
    
            var windDirectionParameter = windDirection.HasValue ?
                new ObjectParameter("WindDirection", windDirection) :
                new ObjectParameter("WindDirection", typeof(int));
    
            var windSpeedParameter = windSpeed.HasValue ?
                new ObjectParameter("WindSpeed", windSpeed) :
                new ObjectParameter("WindSpeed", typeof(decimal));
    
            var humidityParameter = humidity.HasValue ?
                new ObjectParameter("Humidity", humidity) :
                new ObjectParameter("Humidity", typeof(byte));
    
            var precipitationParameter = precipitation.HasValue ?
                new ObjectParameter("Precipitation", precipitation) :
                new ObjectParameter("Precipitation", typeof(byte));
    
            var totalCloudCoverParameter = totalCloudCover.HasValue ?
                new ObjectParameter("TotalCloudCover", totalCloudCover) :
                new ObjectParameter("TotalCloudCover", typeof(byte));
    
            var thunderStormProbabilityParameter = thunderStormProbability.HasValue ?
                new ObjectParameter("ThunderStormProbability", thunderStormProbability) :
                new ObjectParameter("ThunderStormProbability", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WeatherCreate", placeIdParameter, dateTimeParameter, temperatureParameter, windDirectionParameter, windSpeedParameter, humidityParameter, precipitationParameter, totalCloudCoverParameter, thunderStormProbabilityParameter, insertId);
        }
    
        public virtual int usp_WeatherGet(Nullable<int> placeId, string name, Nullable<System.DateTime> dateTime)
        {
            var placeIdParameter = placeId.HasValue ?
                new ObjectParameter("PlaceId", placeId) :
                new ObjectParameter("PlaceId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WeatherGet", placeIdParameter, nameParameter, dateTimeParameter);
        }
    }
}
